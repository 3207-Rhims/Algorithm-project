
public class Bellman {
	class CreateEdge {
		 int s, d, w;
		 CreateEdge() {
		 s = d = w = 0;
		 }
		 };
		 int V, E;
		 CreateEdge edge[];
		 Bellman(int v, int e) {
		 V = v;
		 E = e;
		 edge = new CreateEdge[e];
		 for (int i = 0; i < e; ++i)
		 edge[i] = new CreateEdge();
		 }
		 void BellmanFord(Bellman graph, int s) {
		 int V = graph.V, E = graph.E;
		 int dist[] = new int[V];
		 for (int i = 0; i < V; ++i)
		 dist[i] = Integer.MAX_VALUE;

		 dist[s] = 0;

		 for (int i = 1; i < V; ++i) {
		 for (int j = 0; j < E; ++j) {
		 // Get the edge data
		 int u = graph.edge[j].s;
		 int v = graph.edge[j].d;
		 int w = graph.edge[j].w;
		 if (dist[u] != Integer.MAX_VALUE && dist[u] + w < dist[v])
		 dist[v] = dist[u] + w;
		 }
		 }

		 for (int j = 0; j < E; ++j) {
		 int u = graph.edge[j].s;
		 int v = graph.edge[j].d;
		 int w = graph.edge[j].w;
		 if (dist[u] != Integer.MAX_VALUE && dist[u] + w < dist[v]) {
		 System.out.println("CreateGraph contains negative w cycle");
		 return;
		 }
		 }

		 printSolution(dist, V);
		 }
		 void printSolution(int dist[], int V) {
		 System.out.println("Vertex Distance from Source");
		 for (int i = 0; i < V; ++i)
		 System.out.println(i + "\t\t" + dist[i]);
		 }
		}
