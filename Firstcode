import java.util.*;
import java.util.Collections;
import java.util.Vector;
public class Firstcode {

		
	public static void main(String args[]) {
		
		Scanner input = new Scanner(System.in);
		System.out.println("Welcome to the Algorithm Project");
		System.out.println("---------------------------------");
		System.out.println("What is your choice? ");
		System.out.println(" 1. Data Structure \n ------------ \n 2.Algorithm");
		
		int choice = input.nextInt();
		
		if(choice == 1) {
			System.out.println("Choose one algorithm for run");
			System.out.println(" 1. Bubble Sort\n"
					+ "2.Selection Sort\n"
					+ "3.Insertion Sort\n"
					+ "4.Bucket Sort\n"
					+ "5.Count Sort\n"
					+ "6.Radix Sort\n"
					+ "7.Merge Sort\n"
					+ "8.Shell Sort\n"
					+ "9.Quick Sort\n"
					+ "10.Heap Sort\n"
					+ "11.Binary Search\n"
					+ "12.Linear Search\n");	
			System.out.println("--Enter your data structure choice---");
			int c= input.nextInt();
			
			Input in = new Input();
			switch(c) 
			{
			case 1:
				Bubble b = new Bubble();
				b.bubbleSort(in.Sort_input());
				break;
			case 2:
				Selection s = new Selection();
				s.sort(in.Sort_input());
				break;
			case 3:
				Insertion i = new Insertion();
				i.Insertionsort(in.Sort_input());
				break;
			case 4: 
				Bucket u= new Bucket();
				u.bucketSort(in.bcketSort());
				break;
			case 5:
				Count co = new Count();
				co.countSort(in.Sort_input());
				break;
			case 6:
				Radix r = new Radix();
				r.radixsort(in.Sort_input());
				break;
			case 7:
				break;
			case 8:
				Shell t = new Shell();
				t.sort(in.Sort_input());
				break;
			case 9:
				Quick q = new Quick();
				q.DoQuickSort(null);
				break;
			case 10:
				Heap h = new Heap();
				h.sort(in.Sort_input());
				break;
			case 11:
				Binary bi = new Binary();
				bi.searching();
				break;
			case 12:
				Linear li = new Linear();
				li.searching();
				break;
			}
		}
		
		if (choice == 2) {
			System.out.println("Choose one Algorithm to print\n"
					+ "1.BFS\n"
					+ "2.DFS\n"
					+ "3.Topological Sort"
					+ "4.Bellam Ford\n"
					+ "5.Dijkstra\n");
			
			int d= input.nextInt();
			
			switch(d) 
			{
			case 1:
				Graph g = new Graph(4);
				 g.addEdge(0, 1);
				g.addEdge(0, 2);
				g.addEdge(1, 2);
				g.addEdge(2, 0);
				g.addEdge(2, 3);
				g.addEdge(3, 3);
				 System.out.println("Following is Breadth First Traversal)" + "(starting from vertex 2)");
				 g.BFS(2);
				 System.out.println();
				break;
			case 2:
				DFS df = new DFS(4);
				 df.addEdge(0, 1);
				 df.addEdge(0, 2);
				 df.addEdge(1, 2);
				 df.addEdge(2, 3);
				 System.out.println("Following is Depth First Traversal");
				 df.dfs(2);
				 System.out.println();
				 break;
			case 3:
				Topo t = new Topo(6);
				 t.addEdge(5, 2);
				 t.addEdge(5, 0);
				 t.addEdge(4, 0);
				 t.addEdge(4, 1);
				 t.addEdge(2, 3);
				 t.addEdge(3, 1);
				 System.out.println("Following is a Topological "
				 + "sort of the given graph");

				 t.topologicalSort();
				 System.out.println();
				break;
			case 4:
			   Bellman graph = new Bellman(5,8);
				 // edge 0 --> 1
				 graph.edge[0].s = 0;
				 graph.edge[0].d = 1;
				 graph.edge[0].w = 5;
				 // edge 0 --> 2
				 graph.edge[1].s = 0;
				 graph.edge[1].d = 2;
				 graph.edge[1].w = 4;
				 // edge 1 --> 3
				 graph.edge[2].s = 1;
				 graph.edge[2].d = 3;
				 graph.edge[2].w = 3;
				 // edge 2 --> 1
				 graph.edge[3].s = 2;
				 graph.edge[3].d = 1;
				 graph.edge[3].w = 6;
				 // edge 3 --> 2
				 graph.edge[4].s = 3;
				 graph.edge[4].d = 2;
				 graph.edge[4].w = 2;
				 graph.BellmanFord(graph, 0);

				
				break;
			case 5:
				break;
			case 6:
				break;
			case 7:
				Krushkal K = new Krushkal(6, 8);
				 K.edge[0].src = 0;
				 K.edge[0].dest = 1;
				 K.edge[0].weight = 4;
				 K.edge[1].src = 0;
				 K.edge[1].dest = 2;
				 K.edge[1].weight = 4;
				 K.edge[2].src = 1;
				 K.edge[2].dest = 2;
				 K.edge[2].weight = 2;
				 K.edge[3].src = 2;
				 K.edge[3].dest = 3;
				 K.edge[3].weight = 3;
				 K.edge[4].src = 2;
				 K.edge[4].dest = 5;
				 K.edge[4].weight = 2;
				 K.edge[5].src = 2;
				 K.edge[5].dest = 4;
				 K.edge[5].weight = 4;
				 K.edge[6].src = 3;
				 K.edge[6].dest = 4;
				 K.edge[6].weight = 3;
				 K.edge[7].src = 5;
				 K.edge[7].dest = 4;
				 K.edge[7].weight = 3;
				 K.KruskalAlgo();
				break;
			case 8:
				
				break;
			case 9:
				break;
			case 10:
				break;
			case 12:
				break;
			case 13:
				break;
			}
		}
		
		
		
		
	}

}
